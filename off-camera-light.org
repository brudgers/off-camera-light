* Program purpose
The purpose of the program is to provide a flexible way of estimating the correct settings of a photogrpahic speed light and DSLR camera for a simple scene and likewise estimate the correct construction of a scene given the settings of a speedlight and camera.
** Program Outline
#+BEGIN_SRC smalltalk :tangle off-camera-light.st :noweb tangle
  "off-camera-light.st"
  "Estimates the setting for using a camera and speed light or conversely estimates the necssary scene parameters based on camera and speed light settings"

  <<camera>>

  <<light>>

  <<subject>>

  <<scene>>
#+END_SRC
* Base formula
Working distance at full illumnation equals light rating divided by f-stop at ISO 100.

working_distance = (rating * (log_2(ISO/100) + 1)) / f-stop.

rating = base power / power setting 

* Constraint Network Approach
Given that the goal is to establish a two way relationship circle *light <-> camera <-> scene <-> light* this seems like a problem for constraint networks.
* Objects?
** Light
#+NAME: light
#+BEGIN_SRC smalltalk
  Object subclass: Light [
      "A class to model a speedlight state."
      | rating power_setting |
      guide_number [
          "Get the rating of a speedlight."
          ^rating.
      ]
      guide_number: aDistance [
          "Set the rating of a speedlight."
          rating := aDistance.
      ]
      power [
          "Get the power setting of the speedlight."
          ^power_setting.
      ]
      power: aNumber [
          "Get the power setting of the speedlight."
          power_setting := aNumber.
      ]
  ]        
#+END_SRC
** Camera
#+NAME: camera
#+BEGIN_SRC smalltalk
  Object subclass: Camera [
  "The basis for variable names is Manual of Photography 10th edition.
     n  is relative aperture
     t  is shutter speed
     s  is sensitivity based" 
      | n t s |
      <comment: 'A class for describing the state of a camera.'>
      aperture [
          "Get the aperture value."
          ^n.
      ]
      aperture: stop [
          "Set the camera's aperture."
          n := stop.
      ]
      shutter [
          "Get camera's shutter speed."
          ^t.
      ]
      shutter: aNumber [
          "Set camera's shutter speed."
          t := aNumber.
      ]
      iso [
          "Get camera's sensitivity setting."
          ^s.
      ]
      iso: aNumber [
          "Set camera's sensitivity setting."        
          s := aNumber.
      ]
      eV [
          "Calculate the number of stops away from Sunny 16."
          ^'Not yet implemented'.
      ]
  ]
#+END_SRC
** Scene
A scene for our purpose has a camera, speedlight, a subject, and an exposure value.
#+NAME: scene
#+BEGIN_SRC smalltalk
  Object subclass: Scene [
      | camera light subject eV |
      "A container for all the components of a photograph (sort of)."
  ]
#+END_SRC
*** Subject
#+NAME: subject
#+BEGIN_SRC smalltalk
  Object subclass: Subject [
      | d |
      "A class to describe a photographic subject."
      distance [
          "Get the distance to a subject."
          ^d.
      ]

      distance: aNumber [
          "Set the distance to a subject."
          d := aNumber.
      ]
  ]    
#+END_SRC
*** Foreground
*** Background
